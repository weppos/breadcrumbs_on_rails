= Breadcrumbs On Rails

*BreadcrumbsOnRails* is a simple Ruby on Rails plugin for creating and managing a breadcrumb navigation for a Rails project.
It provides helpers for creating navigation elements with a flexible interface.


== Requirements

* Rails 3

Please note 

* BreadcrumbsOnRails 2.x requires Rails 3. Use BreadcrumbsOnRails 1.x with Rails 2.
* BreadcrumbsOnRails doesn't work with Rails 2.1 or lower.


== Installation

"RubyGems":http://rubygems.org is the preferred way to install *BreadcrumbsOnRails* and the best way if you want install a stable version.

  $ gem install breadcrumbs_on_rails

Specify the Gem dependency in the "Bundler":http://gembundler.com Gemfile.

  gem "breadcrumbs_on_rails"

Use "Bundler":http://gembundler.com and the ":git option":http://gembundler.com/v1.0/git.html if you want to grab the latest version from the Git repository.


== Usage

Creating a breadcrumb navigation menu in your Rails app using BreadcrumbsOnRails is really straightforward.
There are two kinds of breadcrumbs types, statics and volatiles. The first are kept whereas the second ones are only defined in controllers.

To define static menus, do it only once by creating an initializer, there will be availlable everywhere in your controllers.
# config/initializers/breadcrumbs_config.rb
BreadcrumbsOnRails.configure do |config|
  # define a breadcrumb (by default, the :default breadcrumb is used)
  config.add_static_breadcrumb :welcome, :root_path #, :breadcrumb => :default

  # define a breadcrumb
  config.add_static_breadcrumb :home, :root_path, :breadcrumb => :bottomMenu

  # define_static_breadcrumb takes as first argument the symbol name of the breadcrumb to use
  config.define_static_breadcrumb :sideMenuBreadcrumb, :sideMenuKey, :root_path do |menu|
    menu.add_child(:accounts, :accounts_path)
    menu.add_child("?", :help_path)
  end
end


In your controller, call <tt>add_breadcrumb</tt> to push a new element on the breadcrumb stack. <tt>add_breadcrumb</tt> requires two arguments: the name of the breadcrumb and the target path. See the section "Breadcrumb Element" for more details about name and target class types.

  class MyController
  
    add_breadcrumb "home", :root_path
    add_breadcrumb "my", :my_path

    # you may specify the breadcrumbs you want to use instead of the default one
    add_breadcrumb "my", :my_path, :breadcrumb => :bottomMenu
    
    # to add sub-menu (alternate breadcrumbs for the same level)
    add_breadcrumb :users, :users_path do |bread|
      # add submenu using a symbol
      bread.add_child :accounts, :accounts_path
      # or a string (or a proc, see below)
      bread.add_child "Profiles", :profiles_path
    end

    # to add a breadcrumb for current view
    add_breadcrumb_for_current "My profile"

    def index
      # ...
      
      add_breadcrumb "index", index_path
    end
  
  end

The third, optional argument is a Hash of options to customize the breadcrumb.

  class MyController
    def index
      add_breadcrumb "index", index_path, :title => "Back to the Index"
    end
  end

In your view, you can render the breadcrumb menu with the <tt>render_breadcrumbs</tt> helper.

  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>untitled</title>
  </head>
  
  <body>
    <%= render_breadcrumbs %>
  </body>
  </html>

<tt>render_breadcrumbs</tt> understands a limited set of options. For example, you can pass change the default separator with the <tt>:separator</tt> option, or the default breadcrumb to use with the <tt>:breadcrumb</tt> option.

  <body>
    <%= render_breadcrumbs :separator => ' / ', :breadcrumb => :sideMenuBreadcrumb %>
  </body>

More complex customizations require a custom Builder (documentation yet to come).

=== Breadcrumb Element

A breadcrumbs menu is composed by a number of <tt>Element</tt> objects. Each object contains two attributes: the name of the breadcrumb and the target path.

When you call <tt>add_breadcrumb</tt>, the method automatically creates a new <tt>Element</tt> object for you and append it to the breadcrumbs stack. <tt>Element</tt> name and path can be one of the following Ruby types:

* Symbol
* Proc
* String

==== Symbol

If the value is a Symbol, it can be used for two things.
At first, the library try to call the corresponding method in the same context and sets the <tt>Element</tt> attribute to the returned value.
Then, if no method are found with that name, the library search for a key in the translation. (see below for translation keys examples)

  class MyController

    # The Name is set to the value returned by
    # the :root_name method.
    add_breadcrumb :root_name, "/"
    add_breadcrumb :translateMe, "/"
    
    protected

      def root_name
        "the name"
      end

  end

==== Proc

If the value is a Proc, the library calls the proc passing the current view context as argument and sets the <tt>Element</tt> attribute to the returned value. This is useful if you want to postpone the execution to get access to some special methods/variables created in your controller action.

  class MyController

    # The Name is set to the value returned by
    # the :root_name method.
    add_breadcrumb Proc.new { |c| c.my_helper_method },
                   "/"
  
  end

==== String

If the value is a String, the library sets the <tt>Element</tt> attribute to the string value.

  class MyController
    
    # The Name is set to the value returned by
    # the :root_name method.
    add_breadcrumb "homepage", "/"
    
  end


=== Restricting breadcrumb scope

The <tt>add_breadcrumb</tt> method understands all options you are used to pass to a Rails controller filter.
In fact, behind the scenes this method uses a <tt>before_filter</tt> to store the tab in the <tt>@breadcrumbs</tt> variable.

Taking advantage of Rails filter options, you can restrict a tab to a selected group of actions in the same controller.

  class PostsController < ApplicationController
    add_breadcrumb "admin", :admin_path
    add_breadcrumb "posts", :posts_path, :only => %w(index show)
  end
  
  class ApplicationController < ActionController::Base
    add_breadcrumb "admin", :admin_path, :if => :admin_controller?
    
    def admin_controller?
      self.class.name =~ /^Admin(::|Controller)/
    end
  end

=== Internationalization and Localization

BreadcrumbsOnRails is compatible with the standard Rails internationalization framework. 

For example, if you want to localize your menu, define a new breadcrumbs node in your .yml file with all the keys for your elements.

  # config/locales/en.yml
  en:
    breadcrumbs:
      menus:
        default:
          translateMe: "Translated"
          users:
            root: "Menu title"
            accounts: "Accounts sub menu"
    events:
      newYear: "Happy new year"
  
  # config/locales/it.yml
  it:
    breadcrumbs:
      menus:
        default:
          translateMe: "Traduto"
          users:
            root: "Tittoro del menu"
            accounts: "Sotto-menu dei conti"
    events:
      newYear: "Felice anno nuovo"

  # config/locales/fr.yml
  fr:
    breadcrumbs:
      menus:
        default:
          translateMe: "Traduit"
          users:
            root: "Titre du menu"
            accounts: "Sous-menu des comptes"
    events:
      newYear: "Bonne annee"

In your controller, you can also use the <tt>I18n.t</tt> method directly.

  class PostsController < ApplicationController
    add_breadcrumb I18n.t("events.newYear"),  :events_path
    add_breadcrumb I18n.t("events.holidays"),  :events_path, :only => %w(holidays)
  end
  
  class ApplicationController < ActionController::Base
    add_breadcrumb I18n.t("breadcrumbs.homepage"), :root_path
  end


== Author

* {Simone Carletti}[http://www.simonecarletti.com] <weppos@weppos.net>


== Resources

* {Homepage}[http://www.simonecarletti.com/code/breadcrumbs_on_rails]
* {Source}[http://github.com/weppos/breadcrumbs_on_rails]
* {API Documentation}[http://rubydoc.info/gems/breadcrumbs_on_rails]
* {Bugs & Features}[http://github.com/weppos/breadcrumbs_on_rails/issues]


== License

BreadCrumbsOnRails is Copyright (c) 2009-2011 Simone Carletti.
This is Free Software distributed under the MIT license.
